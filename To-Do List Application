import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
from tkinter import ttk
from datetime import datetime
import pickle
import os

class ToDoListApp:
    def __init__(self, master):
        self.master = master
        self.master.title("To-Do List App")

        # Initialize tasks list
        self.tasks = []

        # Styling
        self.style = ttk.Style()
        self.style.theme_use("clam")

        # Task List
        self.task_listbox = tk.Listbox(master, width=50, height=15, font=("Arial", 12))
        self.task_listbox.grid(row=1, column=0, columnspan=3, padx=5, pady=5)

        # Scrollbar for Task List
        self.scrollbar = ttk.Scrollbar(master, orient="vertical", command=self.task_listbox.yview)
        self.scrollbar.grid(row=1, column=3, sticky="ns")
        self.task_listbox.config(yscrollcommand=self.scrollbar.set)

        # Task Input
        self.task_entry = ttk.Entry(master, width=40, font=("Arial", 12))
        self.task_entry.grid(row=0, column=0, padx=5, pady=5, columnspan=2)

        # Add Task Button
        self.add_button = ttk.Button(master, text="Add Task", command=self.add_task)
        self.add_button.grid(row=0, column=2, padx=5, pady=5)

        # Delete Task Button
        self.delete_button = ttk.Button(master, text="Delete Task", command=self.delete_task)
        self.delete_button.grid(row=2, column=0, padx=5, pady=5)

        # Mark as Complete Button
        self.complete_button = ttk.Button(master, text="Mark as Complete", command=self.mark_complete)
        self.complete_button.grid(row=2, column=1, padx=5, pady=5)

        # Priority Combo Box
        self.priority_label = ttk.Label(master, text="Priority:", font=("Arial", 12))
        self.priority_label.grid(row=3, column=0, padx=5, pady=5)
        self.priority_var = tk.StringVar()
        self.priority_combobox = ttk.Combobox(master, textvariable=self.priority_var, state="readonly", values=["High", "Medium", "Low"], font=("Arial", 12))
        self.priority_combobox.grid(row=3, column=1, padx=5, pady=5)
        self.priority_combobox.current(0)

        # Due Date Entry
        self.due_date_label = ttk.Label(master, text="Due Date:", font=("Arial", 12))
        self.due_date_label.grid(row=3, column=2, padx=5, pady=5)
        self.due_date_var = tk.StringVar()
        self.due_date_entry = ttk.Entry(master, textvariable=self.due_date_var, width=15, font=("Arial", 12))
        self.due_date_entry.grid(row=3, column=3, padx=5, pady=5)

        # Save and Load Buttons
        self.save_button = ttk.Button(master, text="Save Tasks", command=self.save_tasks)
        self.save_button.grid(row=4, column=0, padx=5, pady=5)
        self.load_button = ttk.Button(master, text="Load Tasks", command=self.load_tasks)
        self.load_button.grid(row=4, column=1, padx=5, pady=5)

        # Task Details Button
        self.details_button = ttk.Button(master, text="Task Details", command=self.show_task_details)
        self.details_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

        # Edit Task Button
        self.edit_button = ttk.Button(master, text="Edit Task", command=self.edit_task)
        self.edit_button.grid(row=5, column=2, columnspan=2, padx=5, pady=5)

        # Load tasks into listbox
        self.refresh_task_listbox()

    def add_task(self):
        task = self.task_entry.get()
        if task:
            priority = self.priority_var.get()
            due_date = self.due_date_var.get()
            self.tasks.append({"task": task, "priority": priority, "due_date": due_date, "completed": False, "created_at": datetime.now()})
            self.refresh_task_listbox()
            self.task_entry.delete(0, tk.END)
            self.due_date_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Please enter a task.")

    def delete_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            del self.tasks[index]
            self.refresh_task_listbox()

    def mark_complete(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            self.tasks[index]["completed"] = True
            self.refresh_task_listbox()

    def save_tasks(self):
        filename = "tasks.pkl"
        with open(filename, "wb") as f:
            pickle.dump(self.tasks, f)
        messagebox.showinfo("Success", "Tasks saved successfully.")

    def load_tasks(self):
        filename = "tasks.pkl"
        if os.path.exists(filename):
            with open(filename, "rb") as f:
                self.tasks = pickle.load(f)
            self.refresh_task_listbox()
            messagebox.showinfo("Success", "Tasks loaded successfully.")
        else:
            messagebox.showinfo("Info", "No saved tasks found.")

    def refresh_task_listbox(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            task_str = f"{task['task']} - Priority: {task['priority']} - Due Date: {task['due_date']} - {'Completed' if task['completed'] else 'Not Completed'}"
            self.task_listbox.insert(tk.END, task_str)

    def show_task_details(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            task = self.tasks[index]
            created_at = task["created_at"].strftime("%Y-%m-%d %H:%M:%S")
            messagebox.showinfo("Task Details", f"Task: {task['task']}\nPriority: {task['priority']}\nDue Date: {task['due_date']}\nCreated At: {created_at}\nStatus: {'Completed' if task['completed'] else 'Not Completed'}")

    def edit_task(self):
        selected_task_index = self.task_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            task = self.tasks[index]
            new_task = simpledialog.askstring("Edit Task", "Enter the new task:", initialvalue=task["task"])
            if new_task:
                priority = self.priority_var.get()
                due_date = self.due_date_var.get()
                self.tasks[index] = {"task": new_task, "priority": priority, "due_date": due_date, "completed": task["completed"], "created_at": task["created_at"]}
                self.refresh_task_listbox()

def main():
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
